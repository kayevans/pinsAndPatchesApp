{"version":3,"sources":["firebaseApp.js","Header.js","Cart.js","Inventory.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","Component","Cart","className","this","props","cart","map","currentItem","key","item","name","inventory","price","Inventory","componentDidMount","state","dbRef","on","response","dataFromDb","val","stateToSet","pins","push","patches","setState","inventoryToShow","cartRef","userItems","userCart","handleShowPins","handleShowPatches","handleShowAll","addToCart","specificItem","database","ref","href","onClick","index","id","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7d89b641.chunk.js","sourcesContent":["// firebase info\nimport firebase from 'firebase';\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n    apiKey: \"AIzaSyBGBC1coBaK7vzG6TkK_9373dCpKjQND0c\",\n    authDomain: \"pins-and-patches-app.firebaseapp.com\",\n    databaseURL: \"https://pins-and-patches-app.firebaseio.com\",\n    projectId: \"pins-and-patches-app\",\n    storageBucket: \"pins-and-patches-app.appspot.com\",\n    messagingSenderId: \"299635806312\",\n    appId: \"1:299635806312:web:5823e080a41929c53b6bdd\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React, { Component } from 'react';\n\n// import firebase\nimport firebase from './firebaseApp';\n\nclass Header extends Component{\n    render(){\n        return(\n            <header>\n                <h1>pins n' patches</h1>\n            </header>\n        )\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\n\n// import firebase\nimport firebase from './firebaseApp';\n\nclass Cart extends Component{\n\n    // constructor(){\n    //     super();\n\n    //     this.state = {\n    //         dbRef: firebase.database().ref(),\n    //         cartRef: firebase.database().ref('userCart'),\n    //     }\n    // }\n\n    render(){\n        return(\n            <div className=\"cart\">\n                <h3>YOUR CART:</h3>\n                {this.props.cart.map((currentItem)=>{\n                    return(\n                        <div className=\"itemInCart\" key={currentItem.key}>\n                            <h4>{currentItem.item.name}</h4>\n                            <button className=\"removeFromCart\">remove from cart.</button>\n                            <p>{currentItem.item.inventory}</p>\n                            <p>{currentItem.item.price}</p>\n                        </div>\n                    )\n                })\n                }\n            </div>\n        )\n    }\n}\n\nexport default Cart;","import React, { Component } from 'react';\n\n// import firebase\nimport firebase from './firebaseApp';\n\nimport Cart from './Cart';\n\nclass Inventory extends Component{\n\n    constructor(){\n        super();\n\n        this.state = {\n            dbRef: firebase.database().ref(),\n            cartRef: firebase.database().ref('userCart'),\n            inventoryToShow: [],\n            userCart: [],\n        }\n    }\n\n    // initial render\n    componentDidMount = () => {\n        // get values from firebase\n        this.state.dbRef.on('value', (response)=>{\n\n            // get the data\n            const dataFromDb = response.val();\n\n            // make variable to set the state\n            const stateToSet = [];\n\n            // loops through the pins and add to state to set\n            for(let key in dataFromDb.pins){\n                stateToSet.push(dataFromDb.pins[key]);\n            }\n\n            // loops through the patches and adds to the state to set\n            for(let key in dataFromDb.patches){\n                stateToSet.push(dataFromDb.patches[key]);\n            }\n\n            // set the state to the new inventory\n            this.setState({\n                inventoryToShow: stateToSet,\n            })\n        })\n\n        // set up cart for firebase\n        this.state.cartRef.on('value', (response)=>{\n            const stateToSet = [];\n            const dataFromDb = response.val();\n\n            for(let key in dataFromDb){\n                const userItems = {\n                    key: key,\n                    item: dataFromDb[key],\n                }\n\n                stateToSet.push(userItems);\n            }\n\n            this.setState({\n                userCart: stateToSet,\n            })\n\n        })\n    }\n\n    // make a function to show just the pins\n    handleShowPins = () => {\n        // get values from firebase\n        this.state.dbRef.on('value', (response)=>{\n\n            // get the data\n            const dataFromDb = response.val();\n\n            // make variable to set the state\n            const stateToSet = [];\n\n            // loops through the pins and add to state to set\n            for(let key in dataFromDb.pins){\n                stateToSet.push(dataFromDb.pins[key]);\n            }\n\n            // set the state to the new inventory\n            this.setState({\n                inventoryToShow: stateToSet,\n            })\n        })\n    }\n\n    // make a function to show just the patches\n    handleShowPatches = () => {\n        // get values from firebase\n        this.state.dbRef.on('value', (response)=>{\n\n            // get the data\n            const dataFromDb = response.val();\n\n            // make variable to set the state\n            const stateToSet = [];\n\n            // loops through the pins and add to state to set\n            for(let key in dataFromDb.patches){\n                stateToSet.push(dataFromDb.patches[key]);\n            }\n\n            // set the state to the new inventory\n            this.setState({\n                inventoryToShow: stateToSet,\n            })\n        })\n    }\n\n    // make a function to show all of the items\n    handleShowAll = () => {\n        // get values from firebase\n        this.state.dbRef.on('value', (response)=>{\n\n            // get the data\n            const dataFromDb = response.val();\n\n            // make variable to set the state\n            const stateToSet = [];\n\n            // loops through the pins and add to state to set\n            for(let key in dataFromDb.pins){\n                stateToSet.push(dataFromDb.pins[key]);\n            }\n\n            // loops through the patches and adds to the state to set\n            for(let key in dataFromDb.patches){\n                stateToSet.push(dataFromDb.patches[key]);\n            }\n\n            // set the state to the new inventory\n            this.setState({\n                inventoryToShow: stateToSet,\n            })\n        })\n    }\n\n    // make a function to add items to the cart\n    addToCart = (specificItem) => {\n\n        // add to the database\n        this.state.cartRef.push(specificItem);\n    }\n\n    \n    render(){\n        return(\n            <main className=\"inventory\">\n                <div>\n                    <h2>inventory:</h2>\n                    <nav className=\"sideNav\">\n                        <ul>\n                            <li><a href=\"#\" onClick={this.handleShowAll}>All</a></li>\n                            <li><a href=\"#\" onClick={this.handleShowPins}>Pins</a></li>\n                            <li><a href=\"#\" onClick={this.handleShowPatches}>Patches</a></li>\n                        </ul>\n                    </nav>\n                    <section className=\"displayInventory\">\n                        {this.state.inventoryToShow.map((currentItem, index)=>{\n                                return(\n                                    <div key={index}>\n                                        <h3>{currentItem.name}</h3>\n                                        <button onClick={()=>{this.addToCart(currentItem)}} className=\"addToCart\" id={index}>add to cart.</button>\n                                        <p>{currentItem.inventory}</p>\n                                        <p>{currentItem.price}</p>\n                                    </div>\n                                )\n                            })\n                        }\n                    </section>\n                </div>\n                <div>\n                    <Cart cart={this.state.userCart}/>\n                </div>\n            </main>\n        )\n    }\n}\n\nexport default Inventory;","import React, { Component } from 'react';\nimport './App.css';\n\n// import firebase\nimport firebase from './firebaseApp';\n\n// import the other components\nimport Header from './Header';\nimport Inventory from './Inventory';\n\n\nclass App extends Component {\n  render(){\n    return (\n      <div>\n        <Header />\n        <Inventory />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}